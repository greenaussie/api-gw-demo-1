AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: 'VPC ID'
    Default: 'vpc-20b2e749'  # Replace with your VPC ID
  SubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: 'Subnet ID'
    Default: 'subnet-22b2e74b'  # Replace with your subnet ID
Resources:

  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Lambda function'
      VpcId: !Ref VpcId  # Replace with your VPC ID
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'  # Adjust as needed for your use case

  HelloWorldFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'HelloWorldFunction2'
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Hello, World!'
              }
      Runtime: 'python3.11'
      VpcConfig:
        SubnetIds:
          - !Ref SubnetId
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup  # Replace with your security group ID

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - 'ec2:createNetworkInterface'
                  - 'ec2:deleteNetworkInterface'
                  - 'ec2:describeNetworkInterfaces'
                  - 'ec2:describeSecurityGroups'
                  - 'ec2:describeSubnets'
                  - 'ec2:describeVpcs'
                Resource: '*'

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref HelloWorldFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/hello'

  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'HelloWorldApi'

  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'hello'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: 'NONE'
      HttpMethod: 'GET'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        IntegrationHttpMethod: 'POST'
        Type: 'AWS_PROXY'
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HelloWorldFunction.Arn}/invocations'
          - HelloWorldFunction: !GetAtt HelloWorldFunction.Arn

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'prod'
    DependsOn: ApiGatewayMethod

Outputs:
  ApiUrl:
    Description: 'URL for the HelloWorld API'
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/hello'
